name: 'Build and Push'
description: 'Build a docker image and push the image to GCR'
inputs:
  dockerfile:
    description: 'Relative path to dockerfile'
    required: true
  image-path:
    description: 'Location to where image should be pushed'
    required: true
  build-directory:
    description: 'Directory from where docker build should be run'
    required: false
    default: '.'
  deploy-context:
    description: 'String value for deploy context. Should be "prod" or "staging". Only used for the frontend'
    required: false
  basic-auth-username:
    description: 'Username for basic authentication. Only used for the frontend. Required if DISABLE_BASIC_AUTH environment variable is false'
    required: false
  basic-auth-password:
    description: 'Password for basic authentication. Only used for the frontend. Required if DISABLE_BASIC_AUTH environment variable is false'
    required: false
outputs:	
    image-digest:	
      description: 'Digest of image pushed to GCR'	
      value: ${{ steps.get-image-digest.outputs.image-digest }}
runs:
  using: "composite"
  steps:
    - name: Set Up Docker to Use gcloud Credentials
      run: gcloud auth configure-docker -q
      shell: bash
    # Note: it is not generally recommended to pass secrets as build args, but
    # the basic auth credentials are not real secrets because we will provide
    # them to users for beta testing. If we ever need to rely on credentials for
    # protecting sensitive information, we should not use build args.
    # More info here: https://docs.docker.com/engine/reference/builder/#arg
    - run: |
        docker build -t ${{ inputs.image-path }} -f ${{ inputs.dockerfile }} ${{ inputs.build-directory }} \
        --build-arg="DEPLOY_CONTEXT=${{ inputs.deploy-context }}" \
        --build-arg="BASIC_AUTH_USERNAME=${{ inputs.basic-auth-username }}" \
        --build-arg="BASIC_AUTH_PASSWORD=${{ inputs.basic-auth-password }}"
      shell: bash
    - run: docker push ${{ inputs.image-path }}
      shell: bash
    - id: get-image-digest	
      run: echo "image-digest=$(gcloud container images describe ${{ inputs.image-path }} --format='value(image_summary.digest)')" >> $GITHUB_OUTPUT
      shell: bash

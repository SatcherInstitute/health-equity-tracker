name: "Run exporter-service"
description: "Triggers Cloud Run service to export processed tables from BigQuery to GCS bucket as NDJSON. NOTE: GCS export bucket is set during the deployment process as an environment variable."

inputs:
  service_url:
    description: "Exporter service URL"
    required: true
  dataset_name:
    description: "Dataset Name"
    required: true
  category:
    description: "Category (optional)"
    required: false
  demographic:
    description: "Demographic (optional)"
    required: false
    default: ""
  geographic:
    description: "Geographic (optional)"
    required: false
    default: ""
  should_export_as_alls:
    description: "Use this demographic breakdown as the 'alls' breakdown for fallback"
    required: false
    default: "false"
  max_retries:
    description: "Maximum number of retry attempts"
    required: false
    default: "5"
  initial_backoff:
    description: "Initial backoff time in seconds"
    required: false
    default: "10"

runs:
  using: "composite"
  steps:
    - run: |
        MAX_RETRIES=${{ inputs.max_retries }}
        INITIAL_BACKOFF=${{ inputs.initial_backoff }}
        ATTEMPT=0

        while [ $ATTEMPT -lt $MAX_RETRIES ]; do
          echo "Attempt $(($ATTEMPT + 1))/$MAX_RETRIES to call exporter service..."

          HTTP_STATUS=$(curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"dataset_name\":\"${{ inputs.dataset_name }}\",\"demographic\":\"${{ inputs.demographic }}\",\"geographic\":\"${{ inputs.geographic }}\",\"should_export_as_alls\":${{ inputs.should_export_as_alls }}}" \
            ${{ inputs.service_url }} -s -o response.txt -w "%{http_code}")

          if [ $HTTP_STATUS -lt 400 ]; then
            echo "Success: Service request completed with status code $HTTP_STATUS"
            cat response.txt
            exit 0
          else
            # Check for scaling-related error messages in response
            if grep -q "no available instance" response.txt || grep -q "Please try again" response.txt; then
              BACKOFF_TIME=$(( INITIAL_BACKOFF * 2**ATTEMPT ))
              ATTEMPT=$((ATTEMPT + 1))

              if [ $ATTEMPT -lt $MAX_RETRIES ]; then
                echo "Service appears to be scaling up. Retrying in $BACKOFF_TIME seconds..."
                sleep $BACKOFF_TIME
              else
                echo "Error: Maximum retries reached. Last status code: $HTTP_STATUS"
                cat response.txt
                exit 1
              fi
            else
              echo "Error: Request failed with status code $HTTP_STATUS"
              cat response.txt
              exit 1
            fi
          fi
        done
      shell: bash
